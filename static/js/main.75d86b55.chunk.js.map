{"version":3,"sources":["FormComponent.js","ResultComponent.js","App.js","reportWebVitals.js","index.js"],"names":["unitedStatesList","titlesList","servicesList","budgetList","nameRegex","addressRegex","phoneRegex","zipRegex","emailRegex","FormComponent","handle","formData","setRedirect","React","useState","lastNameValid","firstNameValid","heightValid","phoneNumberValid","addressValid","zipCodeValid","emailValid","termAgreeValid","captchaValid","isValid","setValid","Form","onSubmit","e","preventDefault","temp","test","lastName","firstName","phoneNumber","address","zipCode","email","termAgree","captcha","i","validateData","alert","ready","Row","Col","Group","className","Label","Control","type","name","onChange","Text","muted","map","t","Check","inline","label","value","placeholder","as","Select","defaultValue","s","index","checked","b","href","target","Button","variant","ResultComponent","title","heightFeet","heightInches","state","service0","service1","service2","service3","service4","service5","budget","App","setFormData","redirect","classname","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75d86b55.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nlet unitedStatesList = [\"Alaska\", \"Alabama\", \"Arkansas\", \"American Samoa\", \"Arizona\", \"California\", \"Colorado\",\r\n                        \"Connecticut\", \"District of Columbia\", \"Delaware\",\"Florida\",\"Georgia\",\"Guam\",\r\n                        \"Hawaii\",\"Iowa\",\"Idaho\", \"Illinois\", \"Indiana\",\"Kansas\",\"Kentucky\", \"Louisiana\",\r\n                        \"Massachusetts\",\"Maryland\", \"Maine\",\"Michigan\", \"Minnesota\", \"Missouri\", \"Mississippi\",\r\n                        \"Montana\", \"North Carolina\",\"North Dakota\",\"Nebraska\",\"New Hampshire\",\r\n                        \"New Jersey\", \"New Mexico\", \"Nevada\", \"New York\",\"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\",\r\n                        \"Puerto Rico\", \"Rhode Island\", \"South Carolina\", \"South Dakota\",\"Tennessee\",\"Texas\", \"Utah\",\r\n                        \"Virginia\",\"Virgin Islands\",\"Vermont\", \"Washington\", \"Wisconsin\", \"West Virginia\",\"Wyoming\"];\r\n\r\nlet titlesList = [\"None\", \"Student\", \"Professor\", \"Staff\", \"Retired\"];\r\nlet servicesList = [\"Email\", \"Phone\", \"Facebook\", \"Twitter\", \"Surface Mail\", \"Personal Visit\"];\r\nlet budgetList = [\"Less than $50\", \"Between $50 and $100\", \"Above $100\"];\r\n\r\nlet nameRegex = /^[a-zA-Z\\s]{1,40}$/;\r\nlet addressRegex = /^[a-zA-Z0-9\\s]{1,40}$/;\r\nlet phoneRegex = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\r\nlet zipRegex = /^[0-9]{5}$/;\r\nlet emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n\r\nfunction FormComponent({handle, formData, setRedirect}) {\r\n\r\n  const [isValid, setValid] = React.useState({\r\n    lastNameValid: true,\r\n    firstNameValid: true,\r\n    heightValid: true,\r\n    phoneNumberValid: true,\r\n    addressValid: true,\r\n    zipCodeValid: true,\r\n    emailValid: true,\r\n    termAgreeValid: true,\r\n    captchaValid: true\r\n  });\r\n\r\n  let validateData = () => {\r\n    // Last name: Alphabet 40\r\n    let temp = { lastNameValid: (nameRegex.test(formData.lastName)),\r\n    // First name: Alphabet 40\r\n    firstNameValid: (nameRegex.test(formData.firstName)),\r\n    // Phone: Numbers 10 (check Regex)\r\n    phoneNumberValid: (phoneRegex.test(formData.phoneNumber)),\r\n    // Address: AlphaNumeric 40\r\n    addressValid: (addressRegex.test(formData.address)),\r\n    // Zip: abs() Number 5\r\n    zipCodeValid: (zipRegex.test(formData.zipCode)),\r\n    // Email: Regex\r\n    emailValid: (emailRegex.test(formData.email)),\r\n    // Check is clicked\r\n    termAgreeValid: (formData.termAgree),\r\n    // Captcha\r\n    captchaValid: (formData.captcha)\r\n    };\r\n\r\n    setValid(temp);\r\n\r\n    for(let i in temp) {\r\n      if(temp[i] === false)\r\n        return false;\r\n    }\r\n    \r\n    return true;\r\n\r\n  }\r\n\r\n  let handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(validateData()) {\r\n      //submit and go to next page\r\n      setRedirect({ ready: true });\r\n    } else {\r\n      //dont go\r\n      alert(\"Invalid form input! Please check your answers!\");\r\n    }\r\n  }\r\n  \r\n    return (\r\n      <div>\r\n        <h2>CSC 642 842 Fall 2021 Individual Assignment Thomas Abadines “Data survey form”</h2>\r\n   <Form onSubmit={handleSubmit}>\r\n        <Row>\r\n          <Col>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              <Form.Control type=\"text\" name=\"lastName\" onChange={handle}  />\r\n                {!isValid.lastNameValid && <Form.Text muted>\r\n                  Please enter a valid Last Name (under 40 characters, letters only)\r\n                </Form.Text>}\r\n            </Form.Group>\r\n          </Col>\r\n          <Col>\r\n            <Form.Group className=\"mb-3\" >\r\n              <Form.Label>First Name</Form.Label>\r\n              <Form.Control type=\"text\" name=\"firstName\" onChange={handle}  />\r\n                {!isValid.firstNameValid && <Form.Text muted>\r\n                  Please enter a valid First Name (under 40 characters, letters only)\r\n                </Form.Text>}\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Form.Label>Preferred Title</Form.Label>\r\n        <Form.Group className=\"mb-3\" >\r\n          {titlesList.map((t) => (\r\n            <Form.Check key={t}\r\n              inline\r\n              type=\"radio\"\r\n              label={t}\r\n              value={t}\r\n              name=\"title\"\r\n              onChange={handle}\r\n            />\r\n          ))}\r\n        </Form.Group>\r\n\r\n        <Row>\r\n          <Form.Label>Height</Form.Label>\r\n          <Col>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Control placeholder=\"Feet\" name=\"heightFeet\" type=\"number\" onChange={handle}/>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Control placeholder=\"Inches\" name=\"heightInches\" type=\"number\" onChange={handle} />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        \r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>Phone Number</Form.Label>\r\n          <Form.Control placeholder=\"(***)***-****\" name=\"phoneNumber\" onChange={handle} />\r\n          {!isValid.phoneNumberValid && <Form.Text muted>\r\n            Please enter a valid Phone Number (10 digits)\r\n          </Form.Text>}\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>Address</Form.Label>\r\n          <Form.Control placeholder=\"1234 Main St\" name=\"address\" onChange={handle} />\r\n          {!isValid.addressValid && <Form.Text muted>\r\n            Please enter a valid Address (Alphanumeric only)\r\n          </Form.Text>}\r\n        </Form.Group>\r\n\r\n        <Row className=\"mb-3\">\r\n          <Form.Group as={Col}>\r\n            <Form.Label>City</Form.Label>\r\n            <Form.Control  />\r\n          </Form.Group>\r\n\r\n          <Form.Group as={Col}>\r\n            <Form.Label>State</Form.Label>\r\n            <Form.Select defaultValue=\"Choose...\" name=\"state\" onChange={handle}  >\r\n            <option>Choose...</option>\r\n              {unitedStatesList.map((s) => (\r\n                <option key={s}>{s}</option>\r\n              ))}\r\n            </Form.Select>\r\n          </Form.Group>\r\n\r\n        <Form.Group as={Col}>\r\n          <Form.Label>Zip</Form.Label>\r\n          <Form.Control name=\"zipCode\" onChange={handle} />\r\n          {!isValid.zipCodeValid && <Form.Text muted>\r\n            Please enter a valid Zip Code (5 digits)\r\n          </Form.Text>}\r\n        </Form.Group>\r\n      </Row>\r\n\r\n        <Form.Label>Check all services you require</Form.Label>\r\n        <Form.Group className=\"mb-3\">\r\n          {servicesList.map((s, index) => (\r\n            <Form.Check key={s}\r\n              inline\r\n              type=\"checkbox\"\r\n              checked={formData[\"service\" + index]}\r\n              label={s}\r\n              name={\"service\" + index}\r\n              onChange={handle}\r\n            />\r\n          ))}\r\n        </Form.Group>\r\n\r\n        <Form.Label>Your monthly budget for services</Form.Label>\r\n        <Form.Group className=\"mb-3\">\r\n          {budgetList.map((b) => (\r\n            <Form.Check key={b}\r\n              inline\r\n              type=\"radio\"\r\n              label={b}\r\n              value={b}\r\n              name=\"budget\"\r\n              onChange={handle}\r\n            />\r\n          ))}\r\n          \r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>Email</Form.Label>\r\n          <Form.Control type=\"email\" placeholder=\"name@email.com\" name=\"email\" onChange={handle} />\r\n          {!isValid.emailValid && <Form.Text muted>\r\n            Please enter a valid Email (i. e. *****@***.com)\r\n          </Form.Text>}\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>By clicking \"I Agree\", you are agreeing to the <a href=\"#\" target=\"_blank\">Terms</a></Form.Label>\r\n          <Form.Check\r\n              type=\"checkbox\"\r\n              checked={formData.termAgree}\r\n              label=\"I Agree\"\r\n              name=\"termAgree\"\r\n              onChange={handle}\r\n            />\r\n            {!isValid.termAgreeValid && <Form.Text muted>\r\n            Accepting the Terms and Conditions is required.\r\n          </Form.Text>}\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\">\r\n        <Form.Label>Captcha</Form.Label>\r\n          <Form.Check\r\n              type=\"checkbox\"\r\n              checked={formData.captcha}\r\n              label=\"I Am Not A Robot\"\r\n              name=\"captcha\"\r\n              onChange={handle}\r\n            />\r\n          {!isValid.captchaValid && <Form.Text muted>\r\n            Completing the Captcha is required.\r\n          </Form.Text>}\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n      </Form>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default FormComponent;","import React from \"react\";\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction ResultComponent({formData}) {\r\n\r\n    let servicesList = [\"Email\", \"Phone\", \"Facebook\", \"Twitter\", \"Surface Mail\", \"Personal Visit\"];\r\n\r\n    let addressCheck = () => {\r\n        \r\n        return (formData.address && formData.state && formData.zipCode);\r\n    }\r\n\r\n  return (\r\n    <div>\r\n        <h2>Results Verification Page Thomas Abadines</h2>\r\n        <p>Name:<br />{formData.firstName} {formData.lastName}</p>\r\n        {formData.title != \"\" && <p>Title:<br />{formData.title}</p>}\r\n        {formData.heightFeet != 0 && <p>Feet: {formData.heightFeet} Feet</p>}\r\n        {formData.heightInches != 0 && <p>Inches: {formData.heightInches} Inches</p>}\r\n        {formData.phoneNumber != \"\" && <p>Phone Number:<br />{formData.phoneNumber}</p>}\r\n        {formData.email != \"\" && <p>Email:<br />{formData.email}</p>}\r\n        {addressCheck() && <p>Address:<br />{formData.address}, {formData.state} {formData.zipCode}</p>}\r\n        <p>Services Required:</p>\r\n        <ul>\r\n        {formData.service0 && <li>{servicesList[0]}</li>}\r\n        {formData.service1 && <li>{servicesList[1]}</li>}\r\n        {formData.service2 && <li>{servicesList[2]}</li>}\r\n        {formData.service3 && <li>{servicesList[3]}</li>}\r\n        {formData.service4 && <li>{servicesList[4]}</li>}\r\n        {formData.service5 && <li>{servicesList[5]}</li>}\r\n        </ul>\r\n        {formData.budget != \"\" && <p>Budget:<br />{formData.budget}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResultComponent;","import React from \"react\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FormComponent from \"./FormComponent\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport ResultComponent from \"./ResultComponent\";\n\nfunction App() {\n\n  const [formData, setFormData] = React.useState({\n    firstName: \"\",\n    lastName: \"\",\n    title: \"\",\n    heightFeet: 0,\n    heightInches: 0,\n    phoneNumber: \"\",\n    address: \"\",\n    state: \"\",\n    zipCode: \"\",\n    service0: false,\n    service1: false,\n    service2: false,\n    service3: false,\n    service4: false,\n    service5: false,\n    budget: \"\",\n    email: \"\",\n    termAgree: false,\n    captcha: false\n  });\n\n  const [redirect, setRedirect] = React.useState({\n    ready: false\n  });\n\n  let handle = (e) => {\n    var value = e.target.value;\n    if(e.target.type === \"checkbox\") {\n      value = e.target.checked;\n    }\n    setFormData({\n      ...formData,\n      [e.target.name]: value\n    });\n    console.log(e.target.name + \" is now \" + value);\n    console.log(formData);\n  }\n\n  return (\n    <div classname=\"background\">\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Form Demo</h1>\n      </div>\n      <div className=\"center\">\n        {redirect.ready ? <ResultComponent formData={formData} /> : <FormComponent handle={handle} formData={formData} setRedirect={setRedirect} />}\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n      <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}